
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fa8  08001fa8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001fa8  08001fa8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fa8  08001fa8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fa8  08001fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001fb4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001fb4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006642  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2f  00000000  00000000  0002666e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  000280a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  00028898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cfdd  00000000  00000000  00028f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000735e  00000000  00000000  00035f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00043028  00000000  00000000  0003d2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000802eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a08  00000000  00000000  0008033c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f5c 	.word	0x08001f5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001f5c 	.word	0x08001f5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2201      	movs	r2, #1
 800022e:	431a      	orrs	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6a1a      	ldr	r2, [r3, #32]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	621a      	str	r2, [r3, #32]
}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}

0800025a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	b082      	sub	sp, #8
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
 8000262:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	635a      	str	r2, [r3, #52]	; 0x34
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <LedStart>:
 */
#include "main.h"
#include "Led.h"

// Démarre le timer
void LedStart(void){
 8000272:	b580      	push	{r7, lr}
 8000274:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 8000276:	2380      	movs	r3, #128	; 0x80
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	0018      	movs	r0, r3
 800027c:	f7ff ffd0 	bl	8000220 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000280:	2380      	movs	r3, #128	; 0x80
 8000282:	05db      	lsls	r3, r3, #23
 8000284:	2101      	movs	r1, #1
 8000286:	0018      	movs	r0, r3
 8000288:	f7ff ffd8 	bl	800023c <LL_TIM_CC_EnableChannel>
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <LedSetValue>:
// Configure le rapport cyclique de la PWM entre 0 et 255
void LedSetValue(uint8_t val){
 8000292:	b580      	push	{r7, lr}
 8000294:	b082      	sub	sp, #8
 8000296:	af00      	add	r7, sp, #0
 8000298:	0002      	movs	r2, r0
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	701a      	strb	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM2, val);
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	781a      	ldrb	r2, [r3, #0]
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	0011      	movs	r1, r2
 80002a8:	0018      	movs	r0, r3
 80002aa:	f7ff ffd6 	bl	800025a <LL_TIM_OC_SetCompareCH1>
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b002      	add	sp, #8
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <LedPulse>:
// À chaque appel, cette fonction incrémente la luminosité de la LED
// Arrivé à la valeur maximale, chaque appel décrémente la LED
void LedPulse(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	static uint8_t dc = 0;
	static uint8_t up = 0;

	dc = up? dc+1: dc-1;
 80002bc:	4b12      	ldr	r3, [pc, #72]	; (8000308 <LedPulse+0x50>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d004      	beq.n	80002ce <LedPulse+0x16>
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <LedPulse+0x54>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	e003      	b.n	80002d6 <LedPulse+0x1e>
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <LedPulse+0x54>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LedPulse+0x54>)
 80002d8:	7013      	strb	r3, [r2, #0]

	if (dc >= 255) up = 0;
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <LedPulse+0x54>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2bff      	cmp	r3, #255	; 0xff
 80002e0:	d103      	bne.n	80002ea <LedPulse+0x32>
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <LedPulse+0x50>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	701a      	strb	r2, [r3, #0]
 80002e8:	e006      	b.n	80002f8 <LedPulse+0x40>
	else if (dc <= 0 ) up = 1;
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <LedPulse+0x54>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d102      	bne.n	80002f8 <LedPulse+0x40>
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LedPulse+0x50>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	701a      	strb	r2, [r3, #0]

	LedSetValue(dc);
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <LedPulse+0x54>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	0018      	movs	r0, r3
 80002fe:	f7ff ffc8 	bl	8000292 <LedSetValue>

}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000020 	.word	0x20000020
 800030c:	20000021 	.word	0x20000021

08000310 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000320:	401a      	ands	r2, r3
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	431a      	orrs	r2, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b002      	add	sp, #8
 8000330:	bd80      	pop	{r7, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	fdffffff 	.word	0xfdffffff

08000338 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	2207      	movs	r2, #7
 8000348:	4393      	bics	r3, r2
 800034a:	001a      	movs	r2, r3
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	431a      	orrs	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	615a      	str	r2, [r3, #20]
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}

0800035c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	68db      	ldr	r3, [r3, #12]
 800036a:	2204      	movs	r2, #4
 800036c:	4393      	bics	r3, r2
 800036e:	001a      	movs	r2, r3
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	431a      	orrs	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b002      	add	sp, #8
 800037e:	bd80      	pop	{r7, pc}

08000380 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	035b      	lsls	r3, r3, #13
 8000392:	0b5b      	lsrs	r3, r3, #13
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	629a      	str	r2, [r3, #40]	; 0x28
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b082      	sub	sp, #8
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	2201      	movs	r2, #1
 80003b2:	4393      	bics	r3, r2
 80003b4:	001a      	movs	r2, r3
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	431a      	orrs	r2, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	611a      	str	r2, [r3, #16]
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a05      	ldr	r2, [pc, #20]	; (80003ec <LL_ADC_EnableInternalRegulator+0x24>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	0552      	lsls	r2, r2, #21
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	6fffffe8 	.word	0x6fffffe8

080003f0 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	2204      	movs	r2, #4
 80003fe:	4393      	bics	r3, r2
 8000400:	001a      	movs	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	605a      	str	r2, [r3, #4]
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}

0800040e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b082      	sub	sp, #8
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	2208      	movs	r2, #8
 800041c:	4393      	bics	r3, r2
 800041e:	001a      	movs	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	605a      	str	r2, [r3, #4]
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b002      	add	sp, #8
 800042a:	bd80      	pop	{r7, pc}

0800042c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <LL_APB2_GRP1_EnableClock+0x28>)
 8000436:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <LL_APB2_GRP1_EnableClock+0x28>)
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	430a      	orrs	r2, r1
 800043e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <LL_APB2_GRP1_EnableClock+0x28>)
 8000442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	4013      	ands	r3, r2
 8000448:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800044a:	68fb      	ldr	r3, [r7, #12]
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b004      	add	sp, #16
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000

08000458 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <LL_IOP_GRP1_EnableClock+0x28>)
 8000462:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <LL_IOP_GRP1_EnableClock+0x28>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	430a      	orrs	r2, r1
 800046a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <LL_IOP_GRP1_EnableClock+0x28>)
 800046e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	4013      	ands	r3, r2
 8000474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000476:	68fb      	ldr	r3, [r7, #12]
}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	b004      	add	sp, #16
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000

08000484 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b090      	sub	sp, #64	; 0x40
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800048a:	2428      	movs	r4, #40	; 0x28
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	2314      	movs	r3, #20
 8000492:	001a      	movs	r2, r3
 8000494:	2100      	movs	r1, #0
 8000496:	f001 fd59 	bl	8001f4c <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800049a:	2518      	movs	r5, #24
 800049c:	197b      	adds	r3, r7, r5
 800049e:	0018      	movs	r0, r3
 80004a0:	2310      	movs	r3, #16
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f001 fd51 	bl	8001f4c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	003b      	movs	r3, r7
 80004ac:	0018      	movs	r0, r3
 80004ae:	2318      	movs	r3, #24
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f001 fd4a 	bl	8001f4c <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	0018      	movs	r0, r3
 80004be:	f7ff ffb5 	bl	800042c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f7ff ffc8 	bl	8000458 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80004c8:	003b      	movs	r3, r7
 80004ca:	2202      	movs	r2, #2
 80004cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80004ce:	003b      	movs	r3, r7
 80004d0:	2203      	movs	r2, #3
 80004d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	003a      	movs	r2, r7
 80004dc:	23a0      	movs	r3, #160	; 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 ff57 	bl	8001396 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 80004e8:	4a36      	ldr	r2, [pc, #216]	; (80005c4 <MX_ADC_Init+0x140>)
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <MX_ADC_Init+0x144>)
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff ff46 	bl	8000380 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80004f4:	0021      	movs	r1, r4
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000514:	187b      	adds	r3, r7, r1
 8000516:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <MX_ADC_Init+0x144>)
 8000518:	0019      	movs	r1, r3
 800051a:	0010      	movs	r0, r2
 800051c:	f000 fe50 	bl	80011c0 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000520:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <MX_ADC_Init+0x144>)
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f7ff ff07 	bl	8000338 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800052a:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <MX_ADC_Init+0x144>)
 800052c:	2100      	movs	r1, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ff37 	bl	80003a2 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <MX_ADC_Init+0x144>)
 8000536:	2100      	movs	r1, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f7ff ff0f 	bl	800035c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 800053e:	4b23      	ldr	r3, [pc, #140]	; (80005cc <MX_ADC_Init+0x148>)
 8000540:	2100      	movs	r1, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff fee4 	bl	8000310 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <MX_ADC_Init+0x144>)
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff ff50 	bl	80003f0 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ADC_Init+0x144>)
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff ff5b 	bl	800040e <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000558:	197b      	adds	r3, r7, r5
 800055a:	22c0      	movs	r2, #192	; 0xc0
 800055c:	0612      	lsls	r2, r2, #24
 800055e:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000560:	197b      	adds	r3, r7, r5
 8000562:	2200      	movs	r2, #0
 8000564:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000566:	197b      	adds	r3, r7, r5
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800056c:	197b      	adds	r3, r7, r5
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000572:	197b      	adds	r3, r7, r5
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <MX_ADC_Init+0x144>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f000 fdeb 	bl	8001154 <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_ADC_Init+0x144>)
 8000580:	0018      	movs	r0, r3
 8000582:	f7ff ff21 	bl	80003c8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_ADC_Init+0x14c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4912      	ldr	r1, [pc, #72]	; (80005d4 <MX_ADC_Init+0x150>)
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff fdbb 	bl	8000108 <__udivsi3>
 8000592:	0003      	movs	r3, r0
 8000594:	001a      	movs	r2, r3
 8000596:	0013      	movs	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	189b      	adds	r3, r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	210a      	movs	r1, #10
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff fdb1 	bl	8000108 <__udivsi3>
 80005a6:	0003      	movs	r3, r0
 80005a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80005aa:	e002      	b.n	80005b2 <MX_ADC_Init+0x12e>
  {
    wait_loop_index--;
 80005ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005ae:	3b01      	subs	r3, #1
 80005b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80005b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1f9      	bne.n	80005ac <MX_ADC_Init+0x128>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b010      	add	sp, #64	; 0x40
 80005c0:	bdb0      	pop	{r4, r5, r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	04000002 	.word	0x04000002
 80005c8:	40012400 	.word	0x40012400
 80005cc:	40012708 	.word	0x40012708
 80005d0:	20000000 	.word	0x20000000
 80005d4:	00030d40 	.word	0x00030d40

080005d8 <LL_IOP_GRP1_EnableClock>:
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <LL_IOP_GRP1_EnableClock+0x28>)
 80005e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <LL_IOP_GRP1_EnableClock+0x28>)
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	430a      	orrs	r2, r1
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <LL_IOP_GRP1_EnableClock+0x28>)
 80005ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	4013      	ands	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b004      	add	sp, #16
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000

08000604 <LL_GPIO_ResetOutputPin>:
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_GPIO_Init>:
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	003b      	movs	r3, r7
 8000624:	0018      	movs	r0, r3
 8000626:	2318      	movs	r3, #24
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f001 fc8e 	bl	8001f4c <memset>
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff ffd1 	bl	80005d8 <LL_IOP_GRP1_EnableClock>
 8000636:	23a0      	movs	r3, #160	; 0xa0
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	2108      	movs	r1, #8
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff ffe1 	bl	8000604 <LL_GPIO_ResetOutputPin>
 8000642:	23a0      	movs	r3, #160	; 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	2110      	movs	r1, #16
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff ffdb 	bl	8000604 <LL_GPIO_ResetOutputPin>
 800064e:	003b      	movs	r3, r7
 8000650:	2208      	movs	r2, #8
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	003b      	movs	r3, r7
 8000656:	2201      	movs	r2, #1
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	003b      	movs	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	003b      	movs	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	003b      	movs	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	003a      	movs	r2, r7
 800066e:	23a0      	movs	r3, #160	; 0xa0
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fe8e 	bl	8001396 <LL_GPIO_Init>
 800067a:	003b      	movs	r3, r7
 800067c:	2210      	movs	r2, #16
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	003b      	movs	r3, r7
 8000682:	2201      	movs	r2, #1
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	003b      	movs	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	003b      	movs	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	003b      	movs	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	003a      	movs	r2, r7
 800069a:	23a0      	movs	r3, #160	; 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fe78 	bl	8001396 <LL_GPIO_Init>
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b006      	add	sp, #24
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	0002      	movs	r2, r0
 80006b8:	6039      	str	r1, [r7, #0]
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b7f      	cmp	r3, #127	; 0x7f
 80006c4:	d828      	bhi.n	8000718 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c6:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <__NVIC_SetPriority+0xd4>)
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	089b      	lsrs	r3, r3, #2
 80006d0:	33c0      	adds	r3, #192	; 0xc0
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	589b      	ldr	r3, [r3, r2]
 80006d6:	1dfa      	adds	r2, r7, #7
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	0011      	movs	r1, r2
 80006dc:	2203      	movs	r2, #3
 80006de:	400a      	ands	r2, r1
 80006e0:	00d2      	lsls	r2, r2, #3
 80006e2:	21ff      	movs	r1, #255	; 0xff
 80006e4:	4091      	lsls	r1, r2
 80006e6:	000a      	movs	r2, r1
 80006e8:	43d2      	mvns	r2, r2
 80006ea:	401a      	ands	r2, r3
 80006ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	019b      	lsls	r3, r3, #6
 80006f2:	22ff      	movs	r2, #255	; 0xff
 80006f4:	401a      	ands	r2, r3
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0018      	movs	r0, r3
 80006fc:	2303      	movs	r3, #3
 80006fe:	4003      	ands	r3, r0
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000704:	481f      	ldr	r0, [pc, #124]	; (8000784 <__NVIC_SetPriority+0xd4>)
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	089b      	lsrs	r3, r3, #2
 800070e:	430a      	orrs	r2, r1
 8000710:	33c0      	adds	r3, #192	; 0xc0
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000716:	e031      	b.n	800077c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <__NVIC_SetPriority+0xd8>)
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	0019      	movs	r1, r3
 8000720:	230f      	movs	r3, #15
 8000722:	400b      	ands	r3, r1
 8000724:	3b08      	subs	r3, #8
 8000726:	089b      	lsrs	r3, r3, #2
 8000728:	3306      	adds	r3, #6
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	3304      	adds	r3, #4
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	1dfa      	adds	r2, r7, #7
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	0011      	movs	r1, r2
 8000738:	2203      	movs	r2, #3
 800073a:	400a      	ands	r2, r1
 800073c:	00d2      	lsls	r2, r2, #3
 800073e:	21ff      	movs	r1, #255	; 0xff
 8000740:	4091      	lsls	r1, r2
 8000742:	000a      	movs	r2, r1
 8000744:	43d2      	mvns	r2, r2
 8000746:	401a      	ands	r2, r3
 8000748:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	019b      	lsls	r3, r3, #6
 800074e:	22ff      	movs	r2, #255	; 0xff
 8000750:	401a      	ands	r2, r3
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	0018      	movs	r0, r3
 8000758:	2303      	movs	r3, #3
 800075a:	4003      	ands	r3, r0
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <__NVIC_SetPriority+0xd8>)
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	001c      	movs	r4, r3
 8000768:	230f      	movs	r3, #15
 800076a:	4023      	ands	r3, r4
 800076c:	3b08      	subs	r3, #8
 800076e:	089b      	lsrs	r3, r3, #2
 8000770:	430a      	orrs	r2, r1
 8000772:	3306      	adds	r3, #6
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	18c3      	adds	r3, r0, r3
 8000778:	3304      	adds	r3, #4
 800077a:	601a      	str	r2, [r3, #0]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b003      	add	sp, #12
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <LL_RCC_HSI_Enable+0x18>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <LL_RCC_HSI_Enable+0x18>)
 8000796:	2101      	movs	r1, #1
 8000798:	430a      	orrs	r2, r1
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <LL_RCC_HSI_IsReady+0x1c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2204      	movs	r2, #4
 80007b2:	4013      	ands	r3, r2
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d101      	bne.n	80007bc <LL_RCC_HSI_IsReady+0x14>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <LL_RCC_HSI_IsReady+0x16>
 80007bc:	2300      	movs	r3, #0
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000

080007c8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007d6:	4013      	ands	r3, r2
 80007d8:	0019      	movs	r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	021a      	lsls	r2, r3, #8
 80007de:	4b03      	ldr	r3, [pc, #12]	; (80007ec <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007e0:	430a      	orrs	r2, r1
 80007e2:	605a      	str	r2, [r3, #4]
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	ffffe0ff 	.word	0xffffe0ff

080007f4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <LL_RCC_SetSysClkSource+0x24>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	2203      	movs	r2, #3
 8000802:	4393      	bics	r3, r2
 8000804:	0019      	movs	r1, r3
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <LL_RCC_SetSysClkSource+0x24>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	430a      	orrs	r2, r1
 800080c:	60da      	str	r2, [r3, #12]
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40021000 	.word	0x40021000

0800081c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <LL_RCC_GetSysClkSource+0x14>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	220c      	movs	r2, #12
 8000826:	4013      	ands	r3, r2
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40021000 	.word	0x40021000

08000834 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <LL_RCC_SetAHBPrescaler+0x24>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	22f0      	movs	r2, #240	; 0xf0
 8000842:	4393      	bics	r3, r2
 8000844:	0019      	movs	r1, r3
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <LL_RCC_SetAHBPrescaler+0x24>)
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	430a      	orrs	r2, r1
 800084c:	60da      	str	r2, [r3, #12]
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40021000 	.word	0x40021000

0800085c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <LL_RCC_SetAPB1Prescaler+0x28>)
 800086a:	4013      	ands	r3, r2
 800086c:	0019      	movs	r1, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	430a      	orrs	r2, r1
 8000874:	60da      	str	r2, [r3, #12]
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000
 8000884:	fffff8ff 	.word	0xfffff8ff

08000888 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <LL_RCC_SetAPB2Prescaler+0x24>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <LL_RCC_SetAPB2Prescaler+0x28>)
 8000896:	4013      	ands	r3, r2
 8000898:	0019      	movs	r1, r3
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <LL_RCC_SetAPB2Prescaler+0x24>)
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	430a      	orrs	r2, r1
 80008a0:	60da      	str	r2, [r3, #12]
}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b002      	add	sp, #8
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40021000 	.word	0x40021000
 80008b0:	ffffc7ff 	.word	0xffffc7ff

080008b4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <LL_RCC_SetUSARTClockSource+0x2c>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	401a      	ands	r2, r3
 80008c8:	0011      	movs	r1, r2
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	0c1a      	lsrs	r2, r3, #16
 80008d0:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <LL_RCC_SetUSARTClockSource+0x2c>)
 80008d2:	430a      	orrs	r2, r1
 80008d4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b002      	add	sp, #8
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	40021000 	.word	0x40021000

080008e4 <LL_APB1_GRP1_EnableClock>:
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <LL_APB1_GRP1_EnableClock+0x28>)
 80008ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <LL_APB1_GRP1_EnableClock+0x28>)
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <LL_APB1_GRP1_EnableClock+0x28>)
 80008fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4013      	ands	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b004      	add	sp, #16
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000

08000910 <LL_APB2_GRP1_EnableClock>:
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <LL_APB2_GRP1_EnableClock+0x28>)
 800091a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <LL_APB2_GRP1_EnableClock+0x28>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	430a      	orrs	r2, r1
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <LL_APB2_GRP1_EnableClock+0x28>)
 8000926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b004      	add	sp, #16
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000

0800093c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <LL_FLASH_SetLatency+0x24>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2201      	movs	r2, #1
 800094a:	4393      	bics	r3, r2
 800094c:	0019      	movs	r1, r3
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <LL_FLASH_SetLatency+0x24>)
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	430a      	orrs	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40022000 	.word	0x40022000

08000964 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <LL_FLASH_GetLatency+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	4013      	ands	r3, r2
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40022000 	.word	0x40022000

0800097c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <LL_PWR_SetRegulVoltageScaling+0x28>)
 800098a:	4013      	ands	r3, r2
 800098c:	0019      	movs	r1, r3
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	430a      	orrs	r2, r1
 8000994:	601a      	str	r2, [r3, #0]
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	40007000 	.word	0x40007000
 80009a4:	ffffe7ff 	.word	0xffffe7ff

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff ffaf 	bl	8000910 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	055b      	lsls	r3, r3, #21
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff ff94 	bl	80008e4 <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 80009bc:	2301      	movs	r3, #1
 80009be:	425b      	negs	r3, r3
 80009c0:	2103      	movs	r1, #3
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff fe74 	bl	80006b0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c8:	f000 f812 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009cc:	f7ff fe26 	bl	800061c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009d0:	f000 faf6 	bl	8000fc0 <MX_USART2_UART_Init>
  MX_ADC_Init();
 80009d4:	f7ff fd56 	bl	8000484 <MX_ADC_Init>
  MX_SPI1_Init();
 80009d8:	f000 f886 	bl	8000ae8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009dc:	f000 fa17 	bl	8000e0e <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LedStart();
 80009e0:	f7ff fc47 	bl	8000272 <LedStart>
  while (1) {
	  // Dans cet exemple, LedPulse fait appel à LedSetValue
	  LedPulse();
 80009e4:	f7ff fc68 	bl	80002b8 <LedPulse>
	  LL_mDelay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f001 fa5b 	bl	8001ea4 <LL_mDelay>
	  LedPulse();
 80009ee:	e7f9      	b.n	80009e4 <main+0x3c>

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff ffa1 	bl	800093c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	f7ff ffb2 	bl	8000964 <LL_FLASH_GetLatency>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d1fb      	bne.n	80009fc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ffb7 	bl	800097c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000a0e:	f7ff febd 	bl	800078c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	f7ff fec8 	bl	80007a8 <LL_RCC_HSI_IsReady>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d1fa      	bne.n	8000a14 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a1e:	2010      	movs	r0, #16
 8000a20:	f7ff fed2 	bl	80007c8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ff05 	bl	8000834 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ff16 	bl	800085c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f7ff ff29 	bl	8000888 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fedc 	bl	80007f4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	f7ff feed 	bl	800081c <LL_RCC_GetSysClkSource>
 8000a42:	0003      	movs	r3, r0
 8000a44:	2b04      	cmp	r3, #4
 8000a46:	d1fa      	bne.n	8000a3e <SystemClock_Config+0x4e>
  {

  }

  LL_Init1msTick(16000000);
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <SystemClock_Config+0x78>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fa1a 	bl	8001e84 <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <SystemClock_Config+0x78>)
 8000a52:	0018      	movs	r0, r3
 8000a54:	f001 fa48 	bl	8001ee8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000a58:	23c0      	movs	r3, #192	; 0xc0
 8000a5a:	031b      	lsls	r3, r3, #12
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ff29 	bl	80008b4 <LL_RCC_SetUSARTClockSource>
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	00f42400 	.word	0x00f42400

08000a6c <LL_APB2_GRP1_EnableClock>:
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <LL_APB2_GRP1_EnableClock+0x28>)
 8000a76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <LL_APB2_GRP1_EnableClock+0x28>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <LL_APB2_GRP1_EnableClock+0x28>)
 8000a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	4013      	ands	r3, r2
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b004      	add	sp, #16
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000

08000a98 <LL_IOP_GRP1_EnableClock>:
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b004      	add	sp, #16
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <LL_SPI_SetStandard>:
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	4393      	bics	r3, r2
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	431a      	orrs	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <MX_SPI1_Init>:
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b091      	sub	sp, #68	; 0x44
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	2418      	movs	r4, #24
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	2328      	movs	r3, #40	; 0x28
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f001 fa27 	bl	8001f4c <memset>
 8000afe:	003b      	movs	r3, r7
 8000b00:	0018      	movs	r0, r3
 8000b02:	2318      	movs	r3, #24
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f001 fa20 	bl	8001f4c <memset>
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	015b      	lsls	r3, r3, #5
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ffab 	bl	8000a6c <LL_APB2_GRP1_EnableClock>
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff ffbe 	bl	8000a98 <LL_IOP_GRP1_EnableClock>
 8000b1c:	003b      	movs	r3, r7
 8000b1e:	2220      	movs	r2, #32
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	003b      	movs	r3, r7
 8000b24:	2202      	movs	r2, #2
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	003b      	movs	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
 8000b40:	003a      	movs	r2, r7
 8000b42:	23a0      	movs	r3, #160	; 0xa0
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fc24 	bl	8001396 <LL_GPIO_Init>
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	003b      	movs	r3, r7
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	003b      	movs	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	003a      	movs	r2, r7
 8000b74:	23a0      	movs	r3, #160	; 0xa0
 8000b76:	05db      	lsls	r3, r3, #23
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fc0b 	bl	8001396 <LL_GPIO_Init>
 8000b80:	003b      	movs	r3, r7
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	003b      	movs	r3, r7
 8000b88:	2202      	movs	r2, #2
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	2203      	movs	r2, #3
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	003b      	movs	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	003a      	movs	r2, r7
 8000ba6:	23a0      	movs	r3, #160	; 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fbf2 	bl	8001396 <LL_GPIO_Init>
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2282      	movs	r2, #130	; 0x82
 8000bbc:	0052      	lsls	r2, r2, #1
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	0021      	movs	r1, r4
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	615a      	str	r2, [r3, #20]
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2207      	movs	r2, #7
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <MX_SPI1_Init+0x12c>)
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0010      	movs	r0, r2
 8000bfc:	f000 fde2 	bl	80017c4 <LL_SPI_Init>
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <MX_SPI1_Init+0x12c>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <LL_SPI_SetStandard>
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b011      	add	sp, #68	; 0x44
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	40013000 	.word	0x40013000

08000c18 <NMI_Handler>:
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <SVC_Handler>:
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <PendSV_Handler>:
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SysTick_Handler>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <SystemInit>:
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <LL_APB1_GRP1_EnableClock>:
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c56:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <LL_APB1_GRP1_EnableClock+0x28>)
 8000c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b004      	add	sp, #16
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <LL_IOP_GRP1_EnableClock>:
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b004      	add	sp, #16
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <LL_TIM_DisableARRPreload>:
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	4393      	bics	r3, r2
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <LL_TIM_OC_DisableFast>:
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d00d      	beq.n	8000cf0 <LL_TIM_OC_DisableFast+0x2c>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	d008      	beq.n	8000cec <LL_TIM_OC_DisableFast+0x28>
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d101      	bne.n	8000ce8 <LL_TIM_OC_DisableFast+0x24>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e004      	b.n	8000cf2 <LL_TIM_OC_DisableFast+0x2e>
 8000ce8:	2306      	movs	r3, #6
 8000cea:	e002      	b.n	8000cf2 <LL_TIM_OC_DisableFast+0x2e>
 8000cec:	2302      	movs	r3, #2
 8000cee:	e000      	b.n	8000cf2 <LL_TIM_OC_DisableFast+0x2e>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	183a      	adds	r2, r7, r0
 8000cf6:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3318      	adds	r3, #24
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	183b      	adds	r3, r7, r0
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LL_TIM_OC_DisableFast+0x68>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	18cb      	adds	r3, r1, r3
 8000d08:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	183a      	adds	r2, r7, r0
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	4907      	ldr	r1, [pc, #28]	; (8000d30 <LL_TIM_OC_DisableFast+0x6c>)
 8000d14:	5c8a      	ldrb	r2, [r1, r2]
 8000d16:	0011      	movs	r1, r2
 8000d18:	2204      	movs	r2, #4
 8000d1a:	408a      	lsls	r2, r1
 8000d1c:	43d2      	mvns	r2, r2
 8000d1e:	401a      	ands	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b004      	add	sp, #16
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	08001f98 	.word	0x08001f98
 8000d30:	08001fa0 	.word	0x08001fa0

08000d34 <LL_TIM_OC_EnablePreload>:
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d00d      	beq.n	8000d60 <LL_TIM_OC_EnablePreload+0x2c>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b10      	cmp	r3, #16
 8000d48:	d008      	beq.n	8000d5c <LL_TIM_OC_EnablePreload+0x28>
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d101      	bne.n	8000d58 <LL_TIM_OC_EnablePreload+0x24>
 8000d54:	2304      	movs	r3, #4
 8000d56:	e004      	b.n	8000d62 <LL_TIM_OC_EnablePreload+0x2e>
 8000d58:	2306      	movs	r3, #6
 8000d5a:	e002      	b.n	8000d62 <LL_TIM_OC_EnablePreload+0x2e>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e000      	b.n	8000d62 <LL_TIM_OC_EnablePreload+0x2e>
 8000d60:	2300      	movs	r3, #0
 8000d62:	200f      	movs	r0, #15
 8000d64:	183a      	adds	r2, r7, r0
 8000d66:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3318      	adds	r3, #24
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4a0a      	ldr	r2, [pc, #40]	; (8000d9c <LL_TIM_OC_EnablePreload+0x68>)
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	18cb      	adds	r3, r1, r3
 8000d78:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	183b      	adds	r3, r7, r0
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4907      	ldr	r1, [pc, #28]	; (8000da0 <LL_TIM_OC_EnablePreload+0x6c>)
 8000d84:	5ccb      	ldrb	r3, [r1, r3]
 8000d86:	0019      	movs	r1, r3
 8000d88:	2308      	movs	r3, #8
 8000d8a:	408b      	lsls	r3, r1
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	601a      	str	r2, [r3, #0]
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b004      	add	sp, #16
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	08001f98 	.word	0x08001f98
 8000da0:	08001fa0 	.word	0x08001fa0

08000da4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <LL_TIM_SetClockSource+0x24>)
 8000db4:	401a      	ands	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	ffffbff8 	.word	0xffffbff8

08000dcc <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2270      	movs	r2, #112	; 0x70
 8000ddc:	4393      	bics	r3, r2
 8000dde:	001a      	movs	r2, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	431a      	orrs	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	605a      	str	r2, [r3, #4]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	4393      	bics	r3, r2
 8000e00:	001a      	movs	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	609a      	str	r2, [r3, #8]
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e0e:	b5b0      	push	{r4, r5, r7, lr}
 8000e10:	b08e      	sub	sp, #56	; 0x38
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e14:	2428      	movs	r4, #40	; 0x28
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f001 f894 	bl	8001f4c <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000e24:	2518      	movs	r5, #24
 8000e26:	197b      	adds	r3, r7, r5
 8000e28:	0018      	movs	r0, r3
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	001a      	movs	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f001 f88c 	bl	8001f4c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	003b      	movs	r3, r7
 8000e36:	0018      	movs	r0, r3
 8000e38:	2318      	movs	r3, #24
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f001 f885 	bl	8001f4c <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff ff02 	bl	8000c4c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 63;
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	223f      	movs	r2, #63	; 0x3f
 8000e4c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 255;
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	22ff      	movs	r2, #255	; 0xff
 8000e58:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e60:	193a      	adds	r2, r7, r4
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	05db      	lsls	r3, r3, #23
 8000e66:	0011      	movs	r1, r2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fd57 	bl	800191c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	0018      	movs	r0, r3
 8000e74:	f7ff ff16 	bl	8000ca4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f7ff ff90 	bl	8000da4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	2101      	movs	r1, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff ff52 	bl	8000d34 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000e90:	0029      	movs	r1, r5
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2260      	movs	r2, #96	; 0x60
 8000e96:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.CompareValue = 0;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000eaa:	187a      	adds	r2, r7, r1
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 fd7a 	bl	80019ac <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000eb8:	2380      	movs	r3, #128	; 0x80
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff ff00 	bl	8000cc4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	2100      	movs	r1, #0
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff ff7e 	bl	8000dcc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff ff8b 	bl	8000df0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff fecc 	bl	8000c78 <LL_IOP_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	0052      	lsls	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2202      	movs	r2, #2
 8000eec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2205      	movs	r2, #5
 8000f04:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	003a      	movs	r2, r7
 8000f08:	23a0      	movs	r3, #160	; 0xa0
 8000f0a:	05db      	lsls	r3, r3, #23
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 fa41 	bl	8001396 <LL_GPIO_Init>

}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b00e      	add	sp, #56	; 0x38
 8000f1a:	bdb0      	pop	{r4, r5, r7, pc}

08000f1c <LL_APB1_GRP1_EnableClock>:
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <LL_APB1_GRP1_EnableClock+0x28>)
 8000f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b004      	add	sp, #16
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000

08000f48 <LL_IOP_GRP1_EnableClock>:
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <LL_IOP_GRP1_EnableClock+0x28>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b004      	add	sp, #16
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40021000 	.word	0x40021000

08000f74 <LL_USART_Enable>:
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2201      	movs	r2, #1
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b002      	add	sp, #8
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <LL_USART_ConfigAsyncMode>:
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <LL_USART_ConfigAsyncMode+0x2c>)
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	222a      	movs	r2, #42	; 0x2a
 8000faa:	4393      	bics	r3, r2
 8000fac:	001a      	movs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	ffffb7ff 	.word	0xffffb7ff

08000fc0 <MX_USART2_UART_Init>:
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b08f      	sub	sp, #60	; 0x3c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	241c      	movs	r4, #28
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	0018      	movs	r0, r3
 8000fcc:	231c      	movs	r3, #28
 8000fce:	001a      	movs	r2, r3
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f000 ffbb 	bl	8001f4c <memset>
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	0018      	movs	r0, r3
 8000fda:	2318      	movs	r3, #24
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	f000 ffb4 	bl	8001f4c <memset>
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ff97 	bl	8000f1c <LL_APB1_GRP1_EnableClock>
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff ffaa 	bl	8000f48 <LL_IOP_GRP1_EnableClock>
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2203      	movs	r2, #3
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	1d3a      	adds	r2, r7, #4
 800101a:	23a0      	movs	r3, #160	; 0xa0
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f000 f9b8 	bl	8001396 <LL_GPIO_Init>
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2204      	movs	r2, #4
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2202      	movs	r2, #2
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2203      	movs	r2, #3
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2204      	movs	r2, #4
 8001048:	615a      	str	r2, [r3, #20]
 800104a:	1d3a      	adds	r2, r7, #4
 800104c:	23a0      	movs	r3, #160	; 0xa0
 800104e:	05db      	lsls	r3, r3, #23
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f99f 	bl	8001396 <LL_GPIO_Init>
 8001058:	193b      	adds	r3, r7, r4
 800105a:	22e1      	movs	r2, #225	; 0xe1
 800105c:	0252      	lsls	r2, r2, #9
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	0021      	movs	r1, r4
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	187b      	adds	r3, r7, r1
 8001076:	220c      	movs	r2, #12
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	187b      	adds	r3, r7, r1
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0xec>)
 800108a:	0019      	movs	r1, r3
 800108c:	0010      	movs	r0, r2
 800108e:	f000 fe87 	bl	8001da0 <LL_USART_Init>
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0xec>)
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff ff7b 	bl	8000f90 <LL_USART_ConfigAsyncMode>
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <MX_USART2_UART_Init+0xec>)
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ff69 	bl	8000f74 <LL_USART_Enable>
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b00f      	add	sp, #60	; 0x3c
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	40004400 	.word	0x40004400

080010b0 <Reset_Handler>:
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <LoopForever+0x2>)
 80010b2:	4685      	mov	sp, r0
 80010b4:	4813      	ldr	r0, [pc, #76]	; (8001104 <LoopForever+0x6>)
 80010b6:	6801      	ldr	r1, [r0, #0]
 80010b8:	0e09      	lsrs	r1, r1, #24
 80010ba:	4a13      	ldr	r2, [pc, #76]	; (8001108 <LoopForever+0xa>)
 80010bc:	4291      	cmp	r1, r2
 80010be:	d105      	bne.n	80010cc <ApplicationStart>
 80010c0:	4812      	ldr	r0, [pc, #72]	; (800110c <LoopForever+0xe>)
 80010c2:	4913      	ldr	r1, [pc, #76]	; (8001110 <LoopForever+0x12>)
 80010c4:	6001      	str	r1, [r0, #0]
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <LoopForever+0x16>)
 80010c8:	4913      	ldr	r1, [pc, #76]	; (8001118 <LoopForever+0x1a>)
 80010ca:	6001      	str	r1, [r0, #0]

080010cc <ApplicationStart>:
 80010cc:	4813      	ldr	r0, [pc, #76]	; (800111c <LoopForever+0x1e>)
 80010ce:	4914      	ldr	r1, [pc, #80]	; (8001120 <LoopForever+0x22>)
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <LoopForever+0x26>)
 80010d2:	2300      	movs	r3, #0
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:
 80010d6:	58d4      	ldr	r4, [r2, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:
 80010dc:	18c4      	adds	r4, r0, r3
 80010de:	428c      	cmp	r4, r1
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <LoopForever+0x2a>)
 80010e4:	4c11      	ldr	r4, [pc, #68]	; (800112c <LoopForever+0x2e>)
 80010e6:	2300      	movs	r3, #0
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:
 80010ee:	42a2      	cmp	r2, r4
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>
 80010f2:	f7ff fda6 	bl	8000c42 <SystemInit>
 80010f6:	f000 ff05 	bl	8001f04 <__libc_init_array>
 80010fa:	f7ff fc55 	bl	80009a8 <main>

080010fe <LoopForever>:
 80010fe:	e7fe      	b.n	80010fe <LoopForever>
 8001100:	20000800 	.word	0x20000800
 8001104:	00000004 	.word	0x00000004
 8001108:	0000001f 	.word	0x0000001f
 800110c:	40021034 	.word	0x40021034
 8001110:	00000001 	.word	0x00000001
 8001114:	40010000 	.word	0x40010000
 8001118:	00000000 	.word	0x00000000
 800111c:	20000000 	.word	0x20000000
 8001120:	20000004 	.word	0x20000004
 8001124:	08001fb0 	.word	0x08001fb0
 8001128:	20000004 	.word	0x20000004
 800112c:	20000024 	.word	0x20000024

08001130 <ADC1_COMP_IRQHandler>:
 8001130:	e7fe      	b.n	8001130 <ADC1_COMP_IRQHandler>

08001132 <LL_ADC_IsEnabled>:
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2201      	movs	r2, #1
 8001140:	4013      	ands	r3, r2
 8001142:	3b01      	subs	r3, #1
 8001144:	425a      	negs	r2, r3
 8001146:	4153      	adcs	r3, r2
 8001148:	b2db      	uxtb	r3, r3
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <LL_ADC_Init>:
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	230f      	movs	r3, #15
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff ffe2 	bl	8001132 <LL_ADC_IsEnabled>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d118      	bne.n	80011a4 <LL_ADC_Init+0x50>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <LL_ADC_Init+0x68>)
 8001178:	401a      	ands	r2, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	6859      	ldr	r1, [r3, #4]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4319      	orrs	r1, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	430b      	orrs	r3, r1
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	089a      	lsrs	r2, r3, #2
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	e003      	b.n	80011ac <LL_ADC_Init+0x58>
 80011a4:	230f      	movs	r3, #15
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	ffff3fc7 	.word	0xffff3fc7

080011c0 <LL_ADC_REG_Init>:
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	230f      	movs	r3, #15
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ffac 	bl	8001132 <LL_ADC_IsEnabled>
 80011da:	1e03      	subs	r3, r0, #0
 80011dc:	d115      	bne.n	800120a <LL_ADC_REG_Init+0x4a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <LL_ADC_REG_Init+0x60>)
 80011e4:	401a      	ands	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4319      	orrs	r1, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4319      	orrs	r1, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4319      	orrs	r1, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	430b      	orrs	r3, r1
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	e003      	b.n	8001212 <LL_ADC_REG_Init+0x52>
 800120a:	230f      	movs	r3, #15
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	230f      	movs	r3, #15
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b004      	add	sp, #16
 800121e:	bd80      	pop	{r7, pc}
 8001220:	fffec23c 	.word	0xfffec23c

08001224 <LL_GPIO_SetPinMode>:
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	435b      	muls	r3, r3
 8001238:	001a      	movs	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	189b      	adds	r3, r3, r2
 8001240:	43db      	mvns	r3, r3
 8001242:	400b      	ands	r3, r1
 8001244:	001a      	movs	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	435b      	muls	r3, r3
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	434b      	muls	r3, r1
 800124e:	431a      	orrs	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b004      	add	sp, #16
 800125a:	bd80      	pop	{r7, pc}

0800125c <LL_GPIO_SetPinOutputType>:
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	43d2      	mvns	r2, r2
 8001270:	401a      	ands	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	434b      	muls	r3, r1
 8001278:	431a      	orrs	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}

08001286 <LL_GPIO_SetPinSpeed>:
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6899      	ldr	r1, [r3, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	435b      	muls	r3, r3
 800129a:	001a      	movs	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	189b      	adds	r3, r3, r2
 80012a2:	43db      	mvns	r3, r3
 80012a4:	400b      	ands	r3, r1
 80012a6:	001a      	movs	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	435b      	muls	r3, r3
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	434b      	muls	r3, r1
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b004      	add	sp, #16
 80012bc:	bd80      	pop	{r7, pc}

080012be <LL_GPIO_SetPinPull>:
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	68d9      	ldr	r1, [r3, #12]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	435b      	muls	r3, r3
 80012d2:	001a      	movs	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	189b      	adds	r3, r3, r2
 80012da:	43db      	mvns	r3, r3
 80012dc:	400b      	ands	r3, r1
 80012de:	001a      	movs	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	435b      	muls	r3, r3
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	434b      	muls	r3, r1
 80012e8:	431a      	orrs	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <LL_GPIO_SetAFPin_0_7>:
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a19      	ldr	r1, [r3, #32]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	435b      	muls	r3, r3
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4353      	muls	r3, r2
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	435a      	muls	r2, r3
 8001312:	0013      	movs	r3, r2
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	43db      	mvns	r3, r3
 800131a:	400b      	ands	r3, r1
 800131c:	001a      	movs	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	435b      	muls	r3, r3
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	434b      	muls	r3, r1
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	434b      	muls	r3, r1
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	434b      	muls	r3, r1
 800132e:	431a      	orrs	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	621a      	str	r2, [r3, #32]
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b004      	add	sp, #16
 800133a:	bd80      	pop	{r7, pc}

0800133c <LL_GPIO_SetAFPin_8_15>:
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	0a12      	lsrs	r2, r2, #8
 8001354:	4353      	muls	r3, r2
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	0a12      	lsrs	r2, r2, #8
 800135a:	4353      	muls	r3, r2
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	0a12      	lsrs	r2, r2, #8
 8001360:	435a      	muls	r2, r3
 8001362:	0013      	movs	r3, r2
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	43db      	mvns	r3, r3
 800136a:	400b      	ands	r3, r1
 800136c:	001a      	movs	r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	0a09      	lsrs	r1, r1, #8
 8001376:	434b      	muls	r3, r1
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	0a09      	lsrs	r1, r1, #8
 800137c:	434b      	muls	r3, r1
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	0a09      	lsrs	r1, r1, #8
 8001382:	434b      	muls	r3, r1
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	434b      	muls	r3, r1
 8001388:	431a      	orrs	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <LL_GPIO_Init>:
 8001396:	b580      	push	{r7, lr}
 8001398:	b084      	sub	sp, #16
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e048      	b.n	800143c <LL_GPIO_Init+0xa6>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2101      	movs	r1, #1
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4091      	lsls	r1, r2
 80013b4:	000a      	movs	r2, r1
 80013b6:	4013      	ands	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d03a      	beq.n	8001436 <LL_GPIO_Init+0xa0>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d003      	beq.n	80013d0 <LL_GPIO_Init+0x3a>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d10e      	bne.n	80013ee <LL_GPIO_Init+0x58>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff ff54 	bl	8001286 <LL_GPIO_SetPinSpeed>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff ff37 	bl	800125c <LL_GPIO_SetPinOutputType>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	68b9      	ldr	r1, [r7, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff ff61 	bl	80012be <LL_GPIO_SetPinPull>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d111      	bne.n	8001428 <LL_GPIO_Init+0x92>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2bff      	cmp	r3, #255	; 0xff
 8001408:	d807      	bhi.n	800141a <LL_GPIO_Init+0x84>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff ff6f 	bl	80012f6 <LL_GPIO_SetAFPin_0_7>
 8001418:	e006      	b.n	8001428 <LL_GPIO_Init+0x92>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff ff8a 	bl	800133c <LL_GPIO_SetAFPin_8_15>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff fef7 	bl	8001224 <LL_GPIO_SetPinMode>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	40da      	lsrs	r2, r3
 8001444:	1e13      	subs	r3, r2, #0
 8001446:	d1b0      	bne.n	80013aa <LL_GPIO_Init+0x14>
 8001448:	2300      	movs	r3, #0
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	b004      	add	sp, #16
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <LL_RCC_HSI_IsReady>:
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <LL_RCC_HSI_IsReady+0x1c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2204      	movs	r2, #4
 800145e:	4013      	ands	r3, r2
 8001460:	2b04      	cmp	r3, #4
 8001462:	d101      	bne.n	8001468 <LL_RCC_HSI_IsReady+0x14>
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <LL_RCC_HSI_IsReady+0x16>
 8001468:	2300      	movs	r3, #0
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000

08001474 <LL_RCC_LSE_IsReady>:
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <LL_RCC_LSE_IsReady+0x24>)
 800147a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	401a      	ands	r2, r3
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	429a      	cmp	r2, r3
 8001488:	d101      	bne.n	800148e <LL_RCC_LSE_IsReady+0x1a>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <LL_RCC_LSE_IsReady+0x1c>
 800148e:	2300      	movs	r3, #0
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	40021000 	.word	0x40021000

0800149c <LL_RCC_MSI_GetRange>:
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <LL_RCC_MSI_GetRange+0x14>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	23e0      	movs	r3, #224	; 0xe0
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	4013      	ands	r3, r2
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40021000 	.word	0x40021000

080014b4 <LL_RCC_GetSysClkSource>:
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <LL_RCC_GetSysClkSource+0x14>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	220c      	movs	r2, #12
 80014be:	4013      	ands	r3, r2
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	40021000 	.word	0x40021000

080014cc <LL_RCC_GetAHBPrescaler>:
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <LL_RCC_GetAHBPrescaler+0x14>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	22f0      	movs	r2, #240	; 0xf0
 80014d6:	4013      	ands	r3, r2
 80014d8:	0018      	movs	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	40021000 	.word	0x40021000

080014e4 <LL_RCC_GetAPB1Prescaler>:
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	23e0      	movs	r3, #224	; 0xe0
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4013      	ands	r3, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <LL_RCC_GetUSARTClockSource>:
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <LL_RCC_GetUSARTClockSource+0x20>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	401a      	ands	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	041b      	lsls	r3, r3, #16
 8001510:	4313      	orrs	r3, r2
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	40021000 	.word	0x40021000

08001520 <LL_RCC_PLL_GetMainSource>:
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <LL_RCC_PLL_GetMainSource+0x14>)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	025b      	lsls	r3, r3, #9
 800152c:	4013      	ands	r3, r2
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_PLL_GetMultiplicator>:
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <LL_RCC_PLL_GetMultiplicator+0x14>)
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	23f0      	movs	r3, #240	; 0xf0
 8001542:	039b      	lsls	r3, r3, #14
 8001544:	4013      	ands	r3, r2
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000

08001550 <LL_RCC_PLL_GetDivider>:
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <LL_RCC_PLL_GetDivider+0x14>)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	23c0      	movs	r3, #192	; 0xc0
 800155a:	041b      	lsls	r3, r3, #16
 800155c:	4013      	ands	r3, r2
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000

08001568 <LL_RCC_IsActiveFlag_HSIDIV>:
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2210      	movs	r2, #16
 8001572:	4013      	ands	r3, r2
 8001574:	2b10      	cmp	r3, #16
 8001576:	d101      	bne.n	800157c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 800157c:	2300      	movs	r3, #0
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000

08001588 <LL_RCC_GetUSARTClockFreq>:
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d139      	bne.n	800160e <LL_RCC_GetUSARTClockFreq+0x86>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff ffad 	bl	80014fc <LL_RCC_GetUSARTClockSource>
 80015a2:	0003      	movs	r3, r0
 80015a4:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <LL_RCC_GetUSARTClockFreq+0x9c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d01c      	beq.n	80015e4 <LL_RCC_GetUSARTClockFreq+0x5c>
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <LL_RCC_GetUSARTClockFreq+0x9c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d821      	bhi.n	80015f4 <LL_RCC_GetUSARTClockFreq+0x6c>
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d003      	beq.n	80015be <LL_RCC_GetUSARTClockFreq+0x36>
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <LL_RCC_GetUSARTClockFreq+0xa4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d005      	beq.n	80015c8 <LL_RCC_GetUSARTClockFreq+0x40>
 80015bc:	e01a      	b.n	80015f4 <LL_RCC_GetUSARTClockFreq+0x6c>
 80015be:	f000 f83b 	bl	8001638 <RCC_GetSystemClockFreq>
 80015c2:	0003      	movs	r3, r0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e027      	b.n	8001618 <LL_RCC_GetUSARTClockFreq+0x90>
 80015c8:	f7ff ff44 	bl	8001454 <LL_RCC_HSI_IsReady>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d020      	beq.n	8001612 <LL_RCC_GetUSARTClockFreq+0x8a>
 80015d0:	f7ff ffca 	bl	8001568 <LL_RCC_IsActiveFlag_HSIDIV>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d002      	beq.n	80015de <LL_RCC_GetUSARTClockFreq+0x56>
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <LL_RCC_GetUSARTClockFreq+0xa8>)
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	e019      	b.n	8001612 <LL_RCC_GetUSARTClockFreq+0x8a>
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <LL_RCC_GetUSARTClockFreq+0xac>)
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	e016      	b.n	8001612 <LL_RCC_GetUSARTClockFreq+0x8a>
 80015e4:	f7ff ff46 	bl	8001474 <LL_RCC_LSE_IsReady>
 80015e8:	1e03      	subs	r3, r0, #0
 80015ea:	d014      	beq.n	8001616 <LL_RCC_GetUSARTClockFreq+0x8e>
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	e010      	b.n	8001616 <LL_RCC_GetUSARTClockFreq+0x8e>
 80015f4:	f000 f820 	bl	8001638 <RCC_GetSystemClockFreq>
 80015f8:	0003      	movs	r3, r0
 80015fa:	0018      	movs	r0, r3
 80015fc:	f000 f860 	bl	80016c0 <RCC_GetHCLKClockFreq>
 8001600:	0003      	movs	r3, r0
 8001602:	0018      	movs	r0, r3
 8001604:	f000 f872 	bl	80016ec <RCC_GetPCLK1ClockFreq>
 8001608:	0003      	movs	r3, r0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	e004      	b.n	8001618 <LL_RCC_GetUSARTClockFreq+0x90>
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	e002      	b.n	8001618 <LL_RCC_GetUSARTClockFreq+0x90>
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	e000      	b.n	8001618 <LL_RCC_GetUSARTClockFreq+0x90>
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b004      	add	sp, #16
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	000c000c 	.word	0x000c000c
 8001628:	000c0004 	.word	0x000c0004
 800162c:	000c0008 	.word	0x000c0008
 8001630:	003d0900 	.word	0x003d0900
 8001634:	00f42400 	.word	0x00f42400

08001638 <RCC_GetSystemClockFreq>:
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	f7ff ff39 	bl	80014b4 <LL_RCC_GetSysClkSource>
 8001642:	0003      	movs	r3, r0
 8001644:	2b0c      	cmp	r3, #12
 8001646:	d020      	beq.n	800168a <RCC_GetSystemClockFreq+0x52>
 8001648:	d824      	bhi.n	8001694 <RCC_GetSystemClockFreq+0x5c>
 800164a:	2b08      	cmp	r3, #8
 800164c:	d01a      	beq.n	8001684 <RCC_GetSystemClockFreq+0x4c>
 800164e:	d821      	bhi.n	8001694 <RCC_GetSystemClockFreq+0x5c>
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <RCC_GetSystemClockFreq+0x22>
 8001654:	2b04      	cmp	r3, #4
 8001656:	d00b      	beq.n	8001670 <RCC_GetSystemClockFreq+0x38>
 8001658:	e01c      	b.n	8001694 <RCC_GetSystemClockFreq+0x5c>
 800165a:	f7ff ff1f 	bl	800149c <LL_RCC_MSI_GetRange>
 800165e:	0003      	movs	r3, r0
 8001660:	0b5b      	lsrs	r3, r3, #13
 8001662:	3301      	adds	r3, #1
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	0212      	lsls	r2, r2, #8
 8001668:	409a      	lsls	r2, r3
 800166a:	0013      	movs	r3, r2
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	e01c      	b.n	80016aa <RCC_GetSystemClockFreq+0x72>
 8001670:	f7ff ff7a 	bl	8001568 <LL_RCC_IsActiveFlag_HSIDIV>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d002      	beq.n	800167e <RCC_GetSystemClockFreq+0x46>
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <RCC_GetSystemClockFreq+0x7c>)
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	e015      	b.n	80016aa <RCC_GetSystemClockFreq+0x72>
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <RCC_GetSystemClockFreq+0x80>)
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	e012      	b.n	80016aa <RCC_GetSystemClockFreq+0x72>
 8001684:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <RCC_GetSystemClockFreq+0x84>)
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	e00f      	b.n	80016aa <RCC_GetSystemClockFreq+0x72>
 800168a:	f000 f843 	bl	8001714 <RCC_PLL_GetFreqDomain_SYS>
 800168e:	0003      	movs	r3, r0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	e00a      	b.n	80016aa <RCC_GetSystemClockFreq+0x72>
 8001694:	f7ff ff02 	bl	800149c <LL_RCC_MSI_GetRange>
 8001698:	0003      	movs	r3, r0
 800169a:	0b5b      	lsrs	r3, r3, #13
 800169c:	3301      	adds	r3, #1
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	0212      	lsls	r2, r2, #8
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b002      	add	sp, #8
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	003d0900 	.word	0x003d0900
 80016b8:	00f42400 	.word	0x00f42400
 80016bc:	007a1200 	.word	0x007a1200

080016c0 <RCC_GetHCLKClockFreq>:
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	f7ff ff00 	bl	80014cc <LL_RCC_GetAHBPrescaler>
 80016cc:	0003      	movs	r3, r0
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	220f      	movs	r2, #15
 80016d2:	4013      	ands	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <RCC_GetHCLKClockFreq+0x28>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	001a      	movs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	40d3      	lsrs	r3, r2
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	08001f74 	.word	0x08001f74

080016ec <RCC_GetPCLK1ClockFreq>:
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	f7ff fef6 	bl	80014e4 <LL_RCC_GetAPB1Prescaler>
 80016f8:	0003      	movs	r3, r0
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <RCC_GetPCLK1ClockFreq+0x24>)
 80016fe:	5cd3      	ldrb	r3, [r2, r3]
 8001700:	001a      	movs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	40d3      	lsrs	r3, r2
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	08001f84 	.word	0x08001f84

08001714 <RCC_PLL_GetFreqDomain_SYS>:
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	f7ff ff01 	bl	8001520 <LL_RCC_PLL_GetMainSource>
 800171e:	0003      	movs	r3, r0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001728:	f7ff ff1e 	bl	8001568 <LL_RCC_IsActiveFlag_HSIDIV>
 800172c:	1e03      	subs	r3, r0, #0
 800172e:	d002      	beq.n	8001736 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e005      	b.n	8001742 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	e002      	b.n	8001742 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 800173c:	4b0f      	ldr	r3, [pc, #60]	; (800177c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	f7ff fef9 	bl	8001538 <LL_RCC_PLL_GetMultiplicator>
 8001746:	0003      	movs	r3, r0
 8001748:	0c9b      	lsrs	r3, r3, #18
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	001a      	movs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4353      	muls	r3, r2
 8001754:	001c      	movs	r4, r3
 8001756:	f7ff fefb 	bl	8001550 <LL_RCC_PLL_GetDivider>
 800175a:	0003      	movs	r3, r0
 800175c:	0d9b      	lsrs	r3, r3, #22
 800175e:	3301      	adds	r3, #1
 8001760:	0019      	movs	r1, r3
 8001762:	0020      	movs	r0, r4
 8001764:	f7fe fcd0 	bl	8000108 <__udivsi3>
 8001768:	0003      	movs	r3, r0
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b003      	add	sp, #12
 8001770:	bd90      	pop	{r4, r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	003d0900 	.word	0x003d0900
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200
 8001780:	08001f8c 	.word	0x08001f8c

08001784 <LL_SPI_IsEnabled>:
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2240      	movs	r2, #64	; 0x40
 8001792:	4013      	ands	r3, r2
 8001794:	2b40      	cmp	r3, #64	; 0x40
 8001796:	d101      	bne.n	800179c <LL_SPI_IsEnabled+0x18>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <LL_SPI_IsEnabled+0x1a>
 800179c:	2300      	movs	r3, #0
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <LL_SPI_SetCRCPolynomial>:
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	001a      	movs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b002      	add	sp, #8
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <LL_SPI_Init>:
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	230f      	movs	r3, #15
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2201      	movs	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff ffd3 	bl	8001784 <LL_SPI_IsEnabled>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d13c      	bne.n	800185c <LL_SPI_Init+0x98>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <LL_SPI_Init+0xa8>)
 80017e8:	401a      	ands	r2, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6819      	ldr	r1, [r3, #0]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4319      	orrs	r1, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	4319      	orrs	r1, r3
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	4319      	orrs	r1, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4319      	orrs	r1, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	4319      	orrs	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4319      	orrs	r1, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4319      	orrs	r1, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	430b      	orrs	r3, r1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2204      	movs	r2, #4
 800182a:	4393      	bics	r3, r2
 800182c:	001a      	movs	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	0c1b      	lsrs	r3, r3, #16
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	429a      	cmp	r2, r3
 8001844:	d106      	bne.n	8001854 <LL_SPI_Init+0x90>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff ffa9 	bl	80017a6 <LL_SPI_SetCRCPolynomial>
 8001854:	230f      	movs	r3, #15
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	230f      	movs	r3, #15
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b004      	add	sp, #16
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	ffff0040 	.word	0xffff0040

08001870 <LL_TIM_SetPrescaler>:
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <LL_TIM_SetAutoReload>:
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b002      	add	sp, #8
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LL_TIM_OC_SetCompareCH1>:
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	635a      	str	r2, [r3, #52]	; 0x34
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <LL_TIM_OC_SetCompareCH2>:
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	639a      	str	r2, [r3, #56]	; 0x38
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <LL_TIM_OC_SetCompareCH3>:
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b002      	add	sp, #8
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <LL_TIM_OC_SetCompareCH4>:
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b002      	add	sp, #8
 80018fe:	bd80      	pop	{r7, pc}

08001900 <LL_TIM_GenerateEvent_UPDATE>:
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	2201      	movs	r2, #1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}

0800191c <LL_TIM_Init>:
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	05db      	lsls	r3, r3, #23
 8001932:	429a      	cmp	r2, r3
 8001934:	d003      	beq.n	800193e <LL_TIM_Init+0x22>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <LL_TIM_Init+0x88>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d107      	bne.n	800194e <LL_TIM_Init+0x32>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2270      	movs	r2, #112	; 0x70
 8001942:	4393      	bics	r3, r2
 8001944:	001a      	movs	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	05db      	lsls	r3, r3, #23
 8001954:	429a      	cmp	r2, r3
 8001956:	d003      	beq.n	8001960 <LL_TIM_Init+0x44>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <LL_TIM_Init+0x88>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d106      	bne.n	800196e <LL_TIM_Init+0x52>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <LL_TIM_Init+0x8c>)
 8001964:	401a      	ands	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0011      	movs	r1, r2
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff ff83 	bl	8001888 <LL_TIM_SetAutoReload>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	001a      	movs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	0011      	movs	r1, r2
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff6f 	bl	8001870 <LL_TIM_SetPrescaler>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff ffb3 	bl	8001900 <LL_TIM_GenerateEvent_UPDATE>
 800199a:	2300      	movs	r3, #0
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010800 	.word	0x40010800
 80019a8:	fffffcff 	.word	0xfffffcff

080019ac <LL_TIM_OC_Init>:
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	2317      	movs	r3, #23
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2201      	movs	r2, #1
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	015b      	lsls	r3, r3, #5
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d036      	beq.n	8001a38 <LL_TIM_OC_Init+0x8c>
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	015b      	lsls	r3, r3, #5
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d83c      	bhi.n	8001a4e <LL_TIM_OC_Init+0xa2>
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	429a      	cmp	r2, r3
 80019dc:	d021      	beq.n	8001a22 <LL_TIM_OC_Init+0x76>
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d832      	bhi.n	8001a4e <LL_TIM_OC_Init+0xa2>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d003      	beq.n	80019f6 <LL_TIM_OC_Init+0x4a>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b10      	cmp	r3, #16
 80019f2:	d00b      	beq.n	8001a0c <LL_TIM_OC_Init+0x60>
 80019f4:	e02b      	b.n	8001a4e <LL_TIM_OC_Init+0xa2>
 80019f6:	2317      	movs	r3, #23
 80019f8:	18fc      	adds	r4, r7, r3
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	0011      	movs	r1, r2
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 f82c 	bl	8001a5e <OC1Config>
 8001a06:	0003      	movs	r3, r0
 8001a08:	7023      	strb	r3, [r4, #0]
 8001a0a:	e021      	b.n	8001a50 <LL_TIM_OC_Init+0xa4>
 8001a0c:	2317      	movs	r3, #23
 8001a0e:	18fc      	adds	r4, r7, r3
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f868 	bl	8001aec <OC2Config>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	7023      	strb	r3, [r4, #0]
 8001a20:	e016      	b.n	8001a50 <LL_TIM_OC_Init+0xa4>
 8001a22:	2317      	movs	r3, #23
 8001a24:	18fc      	adds	r4, r7, r3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f000 f8a9 	bl	8001b84 <OC3Config>
 8001a32:	0003      	movs	r3, r0
 8001a34:	7023      	strb	r3, [r4, #0]
 8001a36:	e00b      	b.n	8001a50 <LL_TIM_OC_Init+0xa4>
 8001a38:	2317      	movs	r3, #23
 8001a3a:	18fc      	adds	r4, r7, r3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f8e8 	bl	8001c18 <OC4Config>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	7023      	strb	r3, [r4, #0]
 8001a4c:	e000      	b.n	8001a50 <LL_TIM_OC_Init+0xa4>
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	2317      	movs	r3, #23
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	0018      	movs	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b007      	add	sp, #28
 8001a5c:	bd90      	pop	{r4, r7, pc}

08001a5e <OC1Config>:
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4393      	bics	r3, r2
 8001a70:	001a      	movs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	621a      	str	r2, [r3, #32]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2270      	movs	r2, #112	; 0x70
 8001a94:	4393      	bics	r3, r2
 8001a96:	001a      	movs	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	0011      	movs	r1, r2
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fee3 	bl	80018a0 <LL_TIM_OC_SetCompareCH1>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	621a      	str	r2, [r3, #32]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b006      	add	sp, #24
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <OC2Config>:
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	2210      	movs	r2, #16
 8001afc:	4393      	bics	r3, r2
 8001afe:	001a      	movs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	621a      	str	r2, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <OC2Config+0x90>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <OC2Config+0x94>)
 8001b22:	401a      	ands	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2220      	movs	r2, #32
 8001b32:	4393      	bics	r3, r2
 8001b34:	001a      	movs	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2210      	movs	r2, #16
 8001b44:	4393      	bics	r3, r2
 8001b46:	001a      	movs	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	619a      	str	r2, [r3, #24]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0011      	movs	r1, r2
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff fea6 	bl	80018b8 <LL_TIM_OC_SetCompareCH2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	621a      	str	r2, [r3, #32]
 8001b72:	2300      	movs	r3, #0
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b006      	add	sp, #24
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	fffffcff 	.word	0xfffffcff
 8001b80:	ffff8fff 	.word	0xffff8fff

08001b84 <OC3Config>:
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <OC3Config+0x8c>)
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	621a      	str	r2, [r3, #32]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2203      	movs	r2, #3
 8001bb0:	4393      	bics	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2270      	movs	r2, #112	; 0x70
 8001bb8:	4393      	bics	r3, r2
 8001bba:	001a      	movs	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <OC3Config+0x90>)
 8001bc8:	401a      	ands	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <OC3Config+0x8c>)
 8001bd8:	401a      	ands	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	61da      	str	r2, [r3, #28]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7ff fe69 	bl	80018d0 <LL_TIM_OC_SetCompareCH3>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	621a      	str	r2, [r3, #32]
 8001c04:	2300      	movs	r3, #0
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b006      	add	sp, #24
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	fffffeff 	.word	0xfffffeff
 8001c14:	fffffdff 	.word	0xfffffdff

08001c18 <OC4Config>:
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <OC4Config+0x8c>)
 8001c28:	401a      	ands	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	621a      	str	r2, [r3, #32]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <OC4Config+0x90>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <OC4Config+0x94>)
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <OC4Config+0x98>)
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	031b      	lsls	r3, r3, #12
 8001c64:	4313      	orrs	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <OC4Config+0x8c>)
 8001c6c:	401a      	ands	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	61da      	str	r2, [r3, #28]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f7ff fe2b 	bl	80018e8 <LL_TIM_OC_SetCompareCH4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	621a      	str	r2, [r3, #32]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b006      	add	sp, #24
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	ffffefff 	.word	0xffffefff
 8001ca8:	fffffcff 	.word	0xfffffcff
 8001cac:	ffff8fff 	.word	0xffff8fff
 8001cb0:	ffffdfff 	.word	0xffffdfff

08001cb4 <LL_USART_IsEnabled>:
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <LL_USART_IsEnabled+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_USART_IsEnabled+0x1a>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <LL_USART_SetStopBitsLength>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <LL_USART_SetStopBitsLength+0x24>)
 8001ce8:	401a      	ands	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	ffffcfff 	.word	0xffffcfff

08001d00 <LL_USART_SetHWFlowCtrl>:
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <LL_USART_SetHWFlowCtrl+0x24>)
 8001d10:	401a      	ands	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	fffffcff 	.word	0xfffffcff

08001d28 <LL_USART_SetBaudRate>:
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d11c      	bne.n	8001d7a <LL_USART_SetBaudRate+0x52>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	005a      	lsls	r2, r3, #1
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	18d3      	adds	r3, r2, r3
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7fe f9db 	bl	8000108 <__udivsi3>
 8001d52:	0003      	movs	r3, r0
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <LL_USART_SetBaudRate+0x74>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	001a      	movs	r2, r3
 8001d68:	2307      	movs	r3, #7
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	e00c      	b.n	8001d94 <LL_USART_SetBaudRate+0x6c>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	085a      	lsrs	r2, r3, #1
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7fe f9bf 	bl	8000108 <__udivsi3>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	001a      	movs	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b006      	add	sp, #24
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	0000fff0 	.word	0x0000fff0

08001da0 <LL_USART_Init>:
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	230f      	movs	r3, #15
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ff7b 	bl	8001cb4 <LL_USART_IsEnabled>
 8001dbe:	1e03      	subs	r3, r0, #0
 8001dc0:	d13b      	bne.n	8001e3a <LL_USART_Init+0x9a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <LL_USART_Init+0xa8>)
 8001dc8:	401a      	ands	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4319      	orrs	r1, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4319      	orrs	r1, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0011      	movs	r1, r2
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7ff ff72 	bl	8001cd8 <LL_USART_SetStopBitsLength>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7ff ff7f 	bl	8001d00 <LL_USART_SetHWFlowCtrl>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <LL_USART_Init+0xac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d104      	bne.n	8001e14 <LL_USART_Init+0x74>
 8001e0a:	200c      	movs	r0, #12
 8001e0c:	f7ff fbbc 	bl	8001588 <LL_RCC_GetUSARTClockFreq>
 8001e10:	0003      	movs	r3, r0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00f      	beq.n	8001e3a <LL_USART_Init+0x9a>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00b      	beq.n	8001e3a <LL_USART_Init+0x9a>
 8001e22:	230f      	movs	r3, #15
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff77 	bl	8001d28 <LL_USART_SetBaudRate>
 8001e3a:	230f      	movs	r3, #15
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b004      	add	sp, #16
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	efff69f3 	.word	0xefff69f3
 8001e4c:	40004400 	.word	0x40004400

08001e50 <LL_InitTick>:
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	6839      	ldr	r1, [r7, #0]
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7fe f953 	bl	8000108 <__udivsi3>
 8001e62:	0003      	movs	r3, r0
 8001e64:	001a      	movs	r2, r3
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <LL_InitTick+0x30>)
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <LL_InitTick+0x30>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <LL_InitTick+0x30>)
 8001e74:	2205      	movs	r2, #5
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <LL_Init1msTick>:
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	23fa      	movs	r3, #250	; 0xfa
 8001e8e:	009a      	lsls	r2, r3, #2
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	0011      	movs	r1, r2
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff ffdb 	bl	8001e50 <LL_InitTick>
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <LL_mDelay>:
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <LL_mDelay+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	d00c      	beq.n	8001ed4 <LL_mDelay+0x30>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	e008      	b.n	8001ed4 <LL_mDelay+0x30>
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <LL_mDelay+0x40>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d002      	beq.n	8001ed4 <LL_mDelay+0x30>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f3      	bne.n	8001ec2 <LL_mDelay+0x1e>
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <LL_SetSystemCoreClock>:
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <LL_SetSystemCoreClock+0x18>)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	20000000 	.word	0x20000000

08001f04 <__libc_init_array>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	2600      	movs	r6, #0
 8001f08:	4d0c      	ldr	r5, [pc, #48]	; (8001f3c <__libc_init_array+0x38>)
 8001f0a:	4c0d      	ldr	r4, [pc, #52]	; (8001f40 <__libc_init_array+0x3c>)
 8001f0c:	1b64      	subs	r4, r4, r5
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	42a6      	cmp	r6, r4
 8001f12:	d109      	bne.n	8001f28 <__libc_init_array+0x24>
 8001f14:	2600      	movs	r6, #0
 8001f16:	f000 f821 	bl	8001f5c <_init>
 8001f1a:	4d0a      	ldr	r5, [pc, #40]	; (8001f44 <__libc_init_array+0x40>)
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <__libc_init_array+0x44>)
 8001f1e:	1b64      	subs	r4, r4, r5
 8001f20:	10a4      	asrs	r4, r4, #2
 8001f22:	42a6      	cmp	r6, r4
 8001f24:	d105      	bne.n	8001f32 <__libc_init_array+0x2e>
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	00b3      	lsls	r3, r6, #2
 8001f2a:	58eb      	ldr	r3, [r5, r3]
 8001f2c:	4798      	blx	r3
 8001f2e:	3601      	adds	r6, #1
 8001f30:	e7ee      	b.n	8001f10 <__libc_init_array+0xc>
 8001f32:	00b3      	lsls	r3, r6, #2
 8001f34:	58eb      	ldr	r3, [r5, r3]
 8001f36:	4798      	blx	r3
 8001f38:	3601      	adds	r6, #1
 8001f3a:	e7f2      	b.n	8001f22 <__libc_init_array+0x1e>
 8001f3c:	08001fa8 	.word	0x08001fa8
 8001f40:	08001fa8 	.word	0x08001fa8
 8001f44:	08001fa8 	.word	0x08001fa8
 8001f48:	08001fac 	.word	0x08001fac

08001f4c <memset>:
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	1882      	adds	r2, r0, r2
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d100      	bne.n	8001f56 <memset+0xa>
 8001f54:	4770      	bx	lr
 8001f56:	7019      	strb	r1, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	e7f9      	b.n	8001f50 <memset+0x4>

08001f5c <_init>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr

08001f68 <_fini>:
 8001f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f6e:	bc08      	pop	{r3}
 8001f70:	469e      	mov	lr, r3
 8001f72:	4770      	bx	lr
